> Example Request:

```shell
curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/emails \
-H "Authorization: Bearer ll352u9jujauoqz4gstvsae05" \
-H "Content-Type: application/json" \
-X POST \
-d '{ \
    "sendTo": [ \
        {"email": "recipient@smartsheet.com"} \
    ], \
    "subject": "some subject", \
    "message": "some message", \
    "ccMe": false, \
    "rowIds": [ \
        rId1, \
        rId2 \
    ], \
    "columnIds": [ \
        cId1, \
        cId2 \
    ], \
    "includeAttachments": false, \
    "includeDiscussions": false \
}'
```

```csharp
// Specify recipients.
Recipient[] recipients = new Recipient[] {
    new Recipient { Email = "recipient@smartsheet.com" },
};

// Configure email.
MultiRowEmail multiRowEmail = new MultiRowEmail {
    SendTo = recipients,
    Subject = "some subject",
    Message = "some message",
    CcMe = false,
    RowIds = new long[] { rowId1, rowId2 },
    ColumnIds = new long[] { columnId1, columnId2 },
    IncludeAttachments = false,
    IncludeDiscussions = false
};

// Send rows via email.
smartsheet.SheetResources.RowResources.SendRows (sheetId, multiRowEmail);
```

```java
// Specify recipients.
RecipientEmail recipientEmail=new RecipientEmail.AddRecipientEmailBuilder().setEmail("recipient@smartsheet.com").build();

        List<Recipient> recipients=new ArrayList<Recipient>();
        recipients.add(recipientEmail);

// Configure email.
        MultiRowEmail multiRowEmail=new MultiRowEmail.AddMultiRowEmailBuilder()
        .setSendTo(recipients)
        .setSubject("some subject")
        .setMessage("some message")
        .setCcMe(false)
        .setRowIds(Arrays.asList(rowId1,rowId2)
        .setColumnIds(Arrays.asList(columnId1,columnId2)
        .setIncludeAttachments(false)
        .setIncludeDiscussions(false)
        .build();

// Send rows via email.
        smartsheet.sheetResources().rowResources().sendRows(sheetId,multiRowEmail);
```

```python
# Configure email.
email = smartsheet.models.MultiRowEmail()
email.send_to = smartsheet.models.Recipient({
    'email': 'john.doe@smartsheet.com'
})
email.row_ids = [rowId1, rowId2]
email.column_ids = [columnId1, columnId2]

# Send rows via email.
smartsheet.Sheets.send_rows(sheetId, email)
```

> Example Response:

```json
{
    "resultCode": 0,
    "message": "SUCCESS"
}
```

`POST /sheets/{sheetId}/rows/emails`

Sends one or more Rows via email.

     |     |
-----|-----|
<%= SCOPE %> | SHARE_SHEETS
<%= HEADERS %> | <%= HEADER_AUTH %><br/><%= HEADER_CT_JSON %>
<%= REQUEST %> | [MultiRowEmail Object](#multirowemail-object). <br/><br/>The columns included for each row in the email are populated according to the following rules:<ul><li>If the **columnIds** attribute of the MultiRowEmail Object is specified as an array of column Ids, those specific columns are included.</li><li>If the **columnIds** attribute of the MultiRowEmail Object is omitted, all columns except hidden columns shall be included.</li><li>If the **columnIds** attribute of the MultiRowEmail Object is specified as *empty*, no columns shall be included. (Note: In this case, either **includeAttachments**:true or **includeDiscussions**:true must be specified.)
<%= RETURNS %> | [Result Object](#result-object)
